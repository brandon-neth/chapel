#!/usr/bin/env bash
#
# unset normal Chapel environment variables
#
unset CHPL_HOME
unset CHPL_NIGHTLY_LOGDIR
unset CHPL_DEVELOPER
unset CHPL_HOST_PLATFORM
unset CHPL_TARGET_PLATFORM
unset CHPLDEVTMP

mymake="$1"

# Number of logical processes on current system. Will be used as number of jobs
# when calling make with parallel execution.
num_procs=$($(dirname "$0")/chpl-make-cpu_count)

#
# execute actions specified in README
#
if [[ $# == 0 ]]; then
    echo "usage: $0 <make utility>"
    exit 1
fi

source util/quickstart/setchplenv.bash
tmpstatus=$?
if [[ $tmpstatus != 0 ]]; then
    echo "ERROR: source of setchplenv.bash failed"
    exit $tmpstatus
fi

$mymake -j$num_procs
tmpstatus=$?
if [[ $tmpstatus != 0 ]]; then
    echo "ERROR: make failed"
    exit $tmpstatus
fi

$mymake check
tmpstatus=$?
if [[ $tmpstatus != 0 ]]; then
    echo "ERROR: make check failed"
    exit $tmpstatus
fi

chpl -o hello examples/hello.chpl
tmpstatus=$?
if [[ $tmpstatus != 0 ]]; then
    echo "ERROR: compilation of hello.chpl failed"
    exit $tmpstatus
fi

./hello
tmpstatus=$?
if [[ $tmpstatus != 0 ]]; then
    echo "ERROR: execution of hello failed"
    exit $tmpstatus
fi

# Build chpldoc and run chpldoc-check.
$mymake -j$num_procs chpldoc
tmpstatus=$?
if [[ $tmpstatus != 0 ]]; then
    echo "ERROR: make chpldoc failed"
    exit $tmpstatus
fi

$mymake check-chpldoc
tmpstatus=$?
if [[ $tmpstatus != 0 ]]; then
    echo "ERROR: make check-chpldoc failed"
    exit $tmpstatus
fi

$mymake protoc-gen-chpl
tmpstatus=$?
if [[ $tmpstatus != 0 ]]; then
    echo "ERROR: make protoc-gen-chpl failed"
    exit $tmpstatus
fi

# Calculate expected version string from CMakeLists.txt
major=$(cat CMakeLists.txt | grep 'set(CHPL_MAJOR_VERSION' | cut -f2 -d' ' | sed 's/)//g')
minor=$(cat CMakeLists.txt | grep 'set(CHPL_MINOR_VERSION' | cut -f2 -d' ' | sed 's/)//g')
patch=$(cat CMakeLists.txt | grep 'set(CHPL_PATCH_VERSION' | cut -f2 -d' ' | sed 's/)//g')
expected_version_string="$major.$minor.$patch"

# Test chpl --version for expected string version.
version_string=$(chpl --version | grep 'chpl version' | cut -d' ' -f 3)
versionstatus=$?
if [[ $versionstatus != 0 ]]; then
    echo "ERROR: execution of chpl --version failed"
    exit $versionstatus
fi

if [[ "$version_string" != "$expected_version_string" ]]; then
    echo "ERROR: unexpected version string, received '$version_string' expected '$expected_version_string'"
    exit 1
fi

#
# run make in examples directory
#
cd examples
$mymake -j$num_procs
tmpstatus=$?
if [[ $tmpstatus != 0 ]]; then
    echo "ERROR: compiling examples with 'make' failed"
    exit $tmpstatus
fi
cd ..

#
# run test system on examples directory
#
cd examples
tmpstatus=$?
if [[ $tmpstatus != 0 ]]; then
    echo "ERROR: cd into examples failed"
    exit $tmpstatus
fi

start_test_flags=''
if [[ -n "${CHPL_TEST_RELEASE_NORECURSE:-}" ]]; then
    start_test_flags="${start_test_flags} --norecurse"
fi

./start_test ${start_test_flags} -logfile Logs/testReleaseHelp.log
tmpstatus=$?
if [[ $tmpstatus != 0 ]]; then
    echo "ERROR: testing of examples failed"
    exit $tmpstatus
fi

exit 0
